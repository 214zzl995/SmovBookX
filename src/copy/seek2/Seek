<template>
    <!-- 版本2 插入渲染时间过长  方案为 数组队列和全部渲染的界面 -->
    <div class="seek">
        <div class="buttonDiv">
            <el-button @click="start" color="#626aef" style="color: rgb(255, 255, 255)">开始检索</el-button>
            <el-button @click="stop" color="#626aef" style="color: rgb(255, 255, 255)">停止检索</el-button>
            <el-button @click="close" color="#626aef" style="color: rgb(255, 255, 255)">关闭窗口</el-button>
            <el-button @click="getSeekSmov" color="#626aef" style="color: rgb(255, 255, 255)">重载数据</el-button>

            <el-button
                @click="openStatus[2] = !openStatus[2]"
                color="#626aef"
                style="color: rgb(255, 255, 255)"
            >错误是否可见</el-button>
            <el-button
                @click="openStatus[1] = !openStatus[1]"
                color="#626aef"
                style="color: rgb(255, 255, 255)"
            >成功是否可见</el-button>
            <el-button
                @click="openStatus[3] = !openStatus[3]"
                color="#626aef"
                style="color: rgb(255, 255, 255)"
            >正在检索是否可见</el-button>
            <el-button
                @click="openStatus[0] = !openStatus[0]"
                color="#626aef"
                style="color: rgb(255, 255, 255)"
            >未检索是否可见</el-button>

            <el-button
                @click="removeAll"
                color="#626aef"
                style="color: rgb(255, 255, 255)"
            >超级牛逼之一键删除</el-button>
        </div>

        <div v-if="load" class="load">
            <span>Loading...</span>
        </div>

        <div class="smovList">
            <!-- 
              大数据时有严重的渲染问题 考虑使用vxe重写这个块 或者 自己写一个异步的加入线程 一百条一百条加  
              测试发现四千条数据的传输时间已经到了300ms 这个速度非常不满意 对于用户可能要做 表格loading 加 分批传输 加 进度条的的功能
              但是进度条还有个问题 渲染是个异步的过程 在渲染时很可能会出现 几百条数据一次性 突然出现 这个时肯定的 有没有其他办法优化用户的体验
              
              当前方案
              1.在数据进入时就给一个 左上角的 loading 代表数据正在进入
              2.压缩传入的数据  传入的数据时间 至少应该要控制在 200ms内
              3.忽略用户感受

              周末优化
              1.将列表用vxe实现 优化性能问题 
              2.优化vxe 外观 ，包括loading等待的界面 
              3.传入数据时增加异步loading状态

              4.线程池不存方法，方法在每次用的时候生成一个 

              说实话我已经麻木了 这个东西我都显示不出来 我不知道我下一步该怎么进行下去了 

              进行下去了 但是tm的 虚拟列表比tm的直接渲染还慢什么tm的 tm操蛋情况啊 我麻了  明天换种思路吧 只做数据直接传入 会不会有更好的体验 
            -->
            <div v-for="(item, index) in pool.tasks" :key="index">
                <div class="smov" v-if="openStatus[item.status] == true">
                    <el-card
                        class="smovCard"
                        :class="item.status == 1 ? 'smovCard_suss' : item.status == 2 ? 'smovCard_fail' : item.status == 3 ? 'smovCard_seeking' : ''"
                    >
                        <div class="smovName">{{ item.seek_name }}</div>
                        <div class="loadingDiv" v-if="item.status == 3">
                            <el-icon color="#409EFC" class="is-loading loading">
                                <loading />
                            </el-icon>
                        </div>

                        <div class="close">
                            <el-button
                                type="text"
                                v-if="item.status != 3"
                                :icon="Delete"
                                circle
                                @click="deleteTask(index, item.id)"
                            ></el-button>
                        </div>
                    </el-card>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang='ts'>
import { defineComponent, ref, reactive, inject, watch, getCurrentScope, onMounted, onUpdated, nextTick, toRaw } from 'vue';
import { ThreadPool } from '../ts/ThreadPool';
import { invoke, } from "@tauri-apps/api/tauri";
import { getAll, getCurrent } from '@tauri-apps/api/window';
import { listen } from '@tauri-apps/api/event';
import { Loading, Delete } from '@element-plus/icons-vue';
import { ElMessage, ElLoading } from 'element-plus';
import XEUtils from 'xe-utils';
import { VXETable, VxeTableInstance, VxeTableEvents } from "vxe-table";
export default defineComponent({
    name: 'Seek',
    components: { Loading },
    props: [],
    setup(props, { emit }) {

        const Tasks = ref({} as VxeTableInstance)

        const load = ref(false);

        const openStatus = ref({
            0: true,  //wait //不应该是判断检索状态 应该是判断检索结果！
            1: true,  //suss
            2: true,  //fail
            3: true  //run time
        })

        let pool = reactive(new ThreadPool.FixedThreadPool({
            size: 1,
            runningFlag: false,
            autoRun: false
        }))

        onUpdated(() => {

        })

        const addTaskEvent = () => {
            !(async () => await listen('addTask', (event: any) => {
                console.log("检测到数据")
                console.log(Date.now())
                load.value = true;
                console.log(load.value)
                let s = [] as any[];
                pool.addTasks(event.payload);
            }))()
        }

        const getSeekSmov = () => {
            // load.value = true;
            invoke("get_seek_smov").then((res: any) => {
                if (res.data) {
                    pool.addTasks(res.data);
                }
            }).finally(() => {

            })
        }

        onMounted(() => {
            nextTick(() => {
                getSeekSmov();
            })
            addTaskEvent();



        });

        const removeAll = () => {
            load.value = true;

            const data = XEUtils.map(pool.tasks, item => item.id);

            invoke("remove_smov_seek_status", { id: data }).then((res: any) => {
                if (res.code == 200) {
                    ElMessage({
                        message: '将' + data.length + '条数据移出队列',
                        type: 'success',
                    })
                    pool.tasks = [];
                    pool.index = 0;
                } else {
                    ElMessage.error('移除检索队列出现错误');
                    return;
                }
            });


        }

        const start = () => {
            pool.start();
        }

        const stop = () => {
            pool.stop();
        }

        const close = () => {
            getCurrent().hide();
        }

        const deleteTask = (index: number, id: number) => {
            pool.tasks[index].status = 3;
            invoke("remove_smov_seek_status", { id: [id] }).then((res: any) => {
                if (res.code == 200) {
                    pool.removeTask(index);
                } else {
                    ElMessage.error('移除检索队列出现错误');
                    return;
                }
            });
        }

        return {
            start,
            stop,
            close,
            pool,
            openStatus,
            Delete,
            deleteTask,
            removeAll,
            load,
            getSeekSmov,
            Tasks
        };
    }
})

</script>
<style lang='less'>
.testDiv {
    display: flex;
    flex-wrap: wrap;
    line-height: 12px;
    * {
        margin: 5px;
    }
}

.buttonDiv {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    align-items: center;
    * {
        margin: 3px;
    }
}

.smov {
    padding: 8px;
    height: 30px;
}

.smovCard {
    width: 100%;
    height: 40px;
    line-height: 40px;
    .el-card__body {
        padding: 0;
        font-size: 14px;
        font-weight: 600;
        position: relative;
    }
}

.smovCard_suss {
    background: #e4ffef;
}

.smovCard_fail {
    background: #ffe0e0;
}

.loadingDiv {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 40px;
    position: absolute;
    top: 0px;
    left: 0px;
    background: #ffffffe6;
}

.loading {
    width: 20px;
    height: 20px;

    svg {
        width: 20px;
        height: 20px;
    }
}

.close {
    position: absolute;
    top: 0px;
    right: 5px;
    display: flex;
    align-items: center;
    height: 100%;
}

.smovName {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 80%;
    text-align: left;
    margin-left: 10px;
}

.load {
    position: fixed;
    top: 0;
    left: 0;
    background: #ffe0e0;
}
</style>


//一个异步队列的实现‘


    const getAllHistory = async (selectRecords) => {
      let allHistory = [] as any[]
      selectRecords.forEach((item) => {
        allHistory.push((async (item) => {
          return await getChangePromise(item)
        })(item))
      })
      return await Promise.all(allHistory);
    }

    const getChangePromise = (row: any) => {
      return new Promise(function (resolve, reject) {
        invoke("change_active_status", { id: row.id, status: 0 }).then((res: any) => {
          if (res.code == 200) {
          } else {
            ElMessage.error('关闭出现了一个问题' + res.msg)
          }
        }).finally(() => {
          resolve(row);
        })
      });
    }


      // getAllHistory(selectRecords).then((res) => {
      //   table.loading = false;
      //   $table.removeCheckboxRow();

      //   ElMessage({
      //     message: '共' + selectRecords.length + '条数据被关闭',
      //     type: 'success',
      //   })
      // })

      // initFn();



               